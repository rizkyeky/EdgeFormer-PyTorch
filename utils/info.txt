SingleShotDetector(
  (encoder): edgeformer(
    (conv_1): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, normalization=BatchNorm2d, activation=Swish, bias=False)
    (layer_1): Sequential(
      (0): InvertedResidual(in_channels=16, out_channels=32, stride=1, exp=4, dilation=1)
    )
    (layer_2): Sequential(
      (0): InvertedResidual(in_channels=32, out_channels=64, stride=2, exp=4, dilation=1)
      (1): InvertedResidual(in_channels=64, out_channels=64, stride=1, exp=4, dilation=1)
      (2): InvertedResidual(in_channels=64, out_channels=64, stride=1, exp=4, dilation=1)
    )
    (residual): InvertedResidual(in_channels=128, out_channels=160, stride=2, exp=4, dilation=1)
    (layer_3): Sequential(
      (0): InvertedResidual(in_channels=64, out_channels=96, stride=2, exp=4, dilation=1)
      (1): outer_frame_v1
    )
    (layer_4): Sequential(
      (0): InvertedResidual(in_channels=96, out_channels=128, stride=2, exp=4, dilation=1)
      (1): outer_frame_v1
    )
    (layer_5): Sequential(
      (0): InvertedResidual(in_channels=128, out_channels=160, stride=2, exp=4, dilation=1)
      (1): outer_frame_v1
    )
    (conv_1x1_exp): None
    (classifier): None
  )
  (extra_layers): ModuleDict(
    (os_64): SeparableConv(in_channels=160, out_channels=256, kernel_size=3, stride=2, dilation=1)
    (os_128): SeparableConv(in_channels=256, out_channels=128, kernel_size=3, stride=2, dilation=1)
    (os_256): SeparableConv(in_channels=128, out_channels=128, kernel_size=3, stride=2, dilation=1)
    (os_-1): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False, activation=ReLU, bias=False)
    )
  )
  (anchor_box_generator): SSDAnchorGenerator()
  (ssd_heads): ModuleList(
    (0): SSDHead(in_channels=128, n_anchors=6, n_classes=4, n_coordinates=4, kernel_size=3, proj=True, proj_channels=512)
    (1): SSDHead(in_channels=160, n_anchors=6, n_classes=4, n_coordinates=4, kernel_size=3, proj=True, proj_channels=256)
    (2): SSDHead(in_channels=256, n_anchors=6, n_classes=4, n_coordinates=4, kernel_size=3)
    (3): SSDHead(in_channels=128, n_anchors=6, n_classes=4, n_coordinates=4, kernel_size=3)
    (4): SSDHead(in_channels=128, n_anchors=6, n_classes=4, n_coordinates=4, kernel_size=3)
    (5): SSDHead(in_channels=64, n_anchors=4, n_classes=4, n_coordinates=4, kernel_size=1)
  )
)
2023-04-03 10:56:17 - LOGS    - Model statistics for an input of size torch.Size([1, 3, 224, 224])
=================================================================
                 SingleShotDetector Summary
=================================================================
                       Encoder  
ConvLayer                Params:    0.000 M      MACs :    5.419 M
-------------------------------------------------------------------
InvertedResidual         Params:    0.004 M      MACs :   45.761 M
-------------------------------------------------------------------
InvertedResidual
+InvertedResidual
+InvertedResidual        Params:    0.087 M      MACs :  300.655 M
-------------------------------------------------------------------
InvertedResidual
+outer_frame_v1          Params:    0.595 M      MACs :  510.792 M
-------------------------------------------------------------------
InvertedResidual
+outer_frame_v1          Params:    1.587 M      MACs :  347.795 M
-------------------------------------------------------------------
InvertedResidual
+outer_frame_v1          Params:    2.019 M      MACs :  113.376 M
-------------------------------------------------------------------
                           SSD  
SingleShotDetector       Params:    0.291 M      MACs :   21.865 M
=================================================================
Overall parameters   =    4.584 M
Overall MACs         = 1345.662 M
Overall parameters (sanity check) =    4.584 M
=================================================================
2023-04-03 10:56:17 - LOGS    - Loss function
SSDLoss(
        neg_pos_ration=3
        box_loss=SmoothL1 
        class_loss=CrossEntropy
         wt_loss=False
)
2023-04-03 10:56:17 - LOGS    - Optimizer
AdamWOptimizer (
         amsgrad: [False]
         betas: [(0.9, 0.999)]
         capturable: [False]
         eps: [1e-08]
         foreach: [None]
         lr: [0.1]
         maximize: [False]
         weight_decay: [0.02]
)
2023-04-03 10:56:17 - LOGS    - Learning rate scheduler
CosineScheduler(
         min_lr=1e-06
         max_lr=0.0009
         period=1
         warmup_init_lr=9e-05
         warmup_iters=500
 )